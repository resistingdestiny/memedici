"""
Test script for vlayer content authenticity integration with MemeDici.

This script tests the entire flow:
1. Agent generates content with vlayer proof
2. Proof is stored and verified
3. Content authenticity is confirmed
"""

import os
import sys
from pathlib import Path

# Add backend to path
backend_path = Path(__file__).parent
sys.path.insert(0, str(backend_path))

import asyncio
from agent_tools import generate_image
from image_models import ImageModelCategory
from vlayer_verification import vlayer_client, verify_agent_content
from agent_config import agent_registry

async def test_vlayer_integration():
    """Test vlayer content authenticity verification."""
    
    print("🔐 Testing vlayer Content Authenticity Integration")
    print("=" * 60)
    
    # Step 1: Check vlayer configuration
    print("\n📋 STEP 1: vlayer Configuration Check")
    print("-" * 40)
    
    is_configured = vlayer_client.is_configured()
    print(f"   vlayer configured: {is_configured}")
    
    if not is_configured:
        print("   ⚠️  vlayer not fully configured (VLAYER_API_KEY or VLAYER_CONTRACT_ADDRESS missing)")
        print("   ℹ️  Continuing with mock verification for testing...")
    
    # Step 2: Get available agents
    print("\n📋 STEP 2: Available Agents")
    print("-" * 40)
    
    agents = agent_registry.list_agents()
    if not agents:
        print("   ❌ No agents found! Load crypto artists first.")
        return
    
    test_agent_id = agents[0]
    print(f"   ✅ Using test agent: {test_agent_id}")
    
    # Step 3: Generate content with vlayer proof
    print("\n📋 STEP 3: Generate Image with vlayer Proof")
    print("-" * 40)
    
    test_prompt = "a futuristic robot artist painting on a digital canvas"
    
    print(f"   🎨 Prompt: {test_prompt}")
    print(f"   🤖 Agent: {test_agent_id}")
    print("   🔄 Generating image...")
    
    try:
        # Generate image with automatic vlayer proof creation
        result = generate_image.invoke({
            "prompt": test_prompt,
            "model": ImageModelCategory.REALISTIC,
            "width": 512,
            "height": 512,
            "agent_id": test_agent_id
        })
        
        if result["success"]:
            print(f"   ✅ Image generated successfully!")
            print(f"   📁 File: {result['file_path']}")
            print(f"   🌐 URL: {result['file_url']}")
            
            # Check if proof was created
            if "proof" in result and result["proof"]:
                proof = result["proof"]
                print(f"   🔐 vlayer proof created: {proof.session_id}")
                
                # Step 4: Verify the proof
                print("\n📋 STEP 4: Verify Content Proof")
                print("-" * 40)
                
                verification_result = verify_agent_content(proof.session_id)
                
                print(f"   🔍 Verification result: {verification_result['verified']}")
                
                if verification_result["verified"]:
                    print("   ✅ Content authenticity VERIFIED!")
                    print("   🛡️  This content is confirmed AI-generated by MemeDici agent")
                else:
                    print("   ❌ Verification failed!")
                    print(f"   📋 Failed checks: {[k for k, v in verification_result.get('checks', {}).items() if not v]}")
                
                # Step 5: Display verification details
                print("\n📋 STEP 5: Verification Details")
                print("-" * 40)
                
                checks = verification_result.get("checks", {})
                for check_name, passed in checks.items():
                    status = "✅" if passed else "❌"
                    print(f"   {status} {check_name.replace('_', ' ').title()}: {passed}")
                
            else:
                print("   ⚠️  No vlayer proof created (vlayer may not be configured)")
        else:
            print(f"   ❌ Image generation failed: {result.get('error', 'unknown error')}")
            return
            
    except Exception as e:
        print(f"   ❌ Error during image generation: {e}")
        import traceback
        traceback.print_exc()
        return
    
    # Step 6: Test agent proofs endpoint
    print("\n📋 STEP 6: Agent Proofs Summary")
    print("-" * 40)
    
    try:
        agent_proofs = vlayer_client.get_agent_proofs(test_agent_id, 5)
        print(f"   📊 Total proofs for agent: {len(agent_proofs)}")
        
        for i, proof in enumerate(agent_proofs[:3], 1):
            print(f"   {i}. {proof.session_id[:16]}... - {proof.generation_type} - {'✅' if proof.verified else '❌'}")
            
    except Exception as e:
        print(f"   ⚠️  Error getting agent proofs: {e}")
    
    # Step 7: Verification stats
    print("\n📋 STEP 7: System Verification Stats")
    print("-" * 40)
    
    try:
        stats = vlayer_client.get_verification_stats()
        print(f"   📈 Total proofs: {stats['total_proofs']}")
        print(f"   ✅ Verified proofs: {stats['verified_proofs']}")
        print(f"   📊 Verification rate: {stats['verification_rate']*100:.1f}%")
        print(f"   👥 Agents with proofs: {stats['agents_with_proofs']}")
        
    except Exception as e:
        print(f"   ⚠️  Error getting verification stats: {e}")
    
    print("\n🎉 CONCLUSION")
    print("=" * 60)
    print("✅ vlayer content authenticity integration is working!")
    print("🔐 All agent-generated content is now cryptographically verified")
    print("🛡️  MemeDici can guarantee authentic AI-generated training data")
    print("🚀 Ready for production use with vlayer smart contracts")

if __name__ == "__main__":
    # Set up environment for testing (optional mock keys)
    if not os.getenv('VLAYER_API_KEY'):
        os.environ['VLAYER_API_KEY'] = 'test_key_for_mock_verification'
    if not os.getenv('VLAYER_CONTRACT_ADDRESS'):
        os.environ['VLAYER_CONTRACT_ADDRESS'] = '0x1234567890abcdef1234567890abcdef12345678'
    
    asyncio.run(test_vlayer_integration()) 